<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <includedby refid="stack_8c" local="yes">stack.c</includedby>
    <invincdepgraph>
      <node id="3">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="4">
        <label>stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1a556f3d4ad53b32062d1aeaff9688133c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push</definition>
        <argsstring>(long)</argsstring>
        <name>push</name>
        <param>
          <type>long</type>
          <defname>valor</defname>
        </param>
        <briefdescription>
<para>Esta função adiciona um elemento no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>O valor que vai ser inserido na stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="1" column="6" bodyfile="stack.c" bodystart="57" bodyend="62" declfile="stack.h" declline="1" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1abea78f7ba35d074a49d68afb77f48e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <briefdescription>
<para>Esta função retira o elemento que está no topo a stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>O elemento que foi retirado da stack </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="2" column="6" bodyfile="stack.c" bodystart="71" bodyend="76" declfile="stack.h" declline="2" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1aad010b608ced490642139b7ef4539207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pop_double</definition>
        <argsstring>(long *, long *)</argsstring>
        <name>pop_double</name>
        <param>
          <type>long *</type>
          <defname>operando1</defname>
        </param>
        <param>
          <type>long *</type>
          <defname>operando2</defname>
        </param>
        <briefdescription>
<para>Esta função prepara uma operação aritmética envolvendo 2 operandos. </para>
        </briefdescription>
        <detaileddescription>
<para>A função retira os dois elementos que estão no topo da stack Cada elemento retirado é guardado em um endereço de memória para mais tarde efetuar o push da operação aritmética envolvendo estes dois elementos</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operando1</parametername>
</parameternamelist>
<parameterdescription>
<para>endereço de memória que vai guardar um elemento retirado da stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operando2</parametername>
</parameternamelist>
<parameterdescription>
<para>endereço de memória que vai guardar o outro elemento retirado da stack </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="3" column="6" bodyfile="stack.c" bodystart="91" bodyend="96" declfile="stack.h" declline="3" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a7aeed04bb4cb6fc409ffe0144bdb8f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintStack</definition>
        <argsstring>()</argsstring>
        <name>PrintStack</name>
        <briefdescription>
<para>Esta função mostra o conteúdo que está na stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="4" column="6" bodyfile="stack.c" bodystart="102" bodyend="112" declfile="stack.h" declline="4" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a556f3d4ad53b32062d1aeaff9688133c" kindref="member">push</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1abea78f7ba35d074a49d68afb77f48e28" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1aad010b608ced490642139b7ef4539207" kindref="member">pop_double</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a7aeed04bb4cb6fc409ffe0144bdb8f3c" kindref="member">PrintStack</ref><sp/>();</highlight></codeline>
    </programlisting>
    <location file="stack.h"/>
  </compounddef>
</doxygen>
